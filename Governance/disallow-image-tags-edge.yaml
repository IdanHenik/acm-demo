apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-disallow-tags
  namespace: ""
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-7 Boundary Protection
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-disallow-tags
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            exclude:
              - '{{ fromClusterClaim "name" }}'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: config.gatekeeper.sh/v1alpha1
                kind: Config
                metadata:
                  name: config
                  namespace: gatekeeper-system
                spec:
                  match:
                  - excludedNamespaces:
                    - default
                    - kube-system
                    - kube-public
                    - openshift-kube-apiserver
                    - openshift-monitoring
                    - open-cluster-management-agent
                    - open-cluster-management*
                    - open-cluster-management-agent-addon
                    - openshift-sdn
                    - openshift-machine-config-operator
                    - openshift-machine-api
                    - openshift-ingress-operator
                    - openshift-ingress
                    - sdn-controller
                    - openshift-cluster-csi-drivers
                    - openshift-kube-controller-manager-operator
                    - openshift-kube-controller-manager
                    - openshift*
                    - hive
                    - '{{ fromClusterClaim "name" }}'
                    processes:
                     - "*"
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-disallow-tags
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            exclude:
              - '{{ fromClusterClaim "name" }}'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  name: k8sdisallowtags
                spec:
                  crd:
                    spec:
                      names:
                        kind: K8sDisallowTags
                      validation: 
                        openAPIV3Schema:
                           type: object
                           properties:
                             exemptImages:
                               type: array
                               items:
                                 type: string
                             tags:
                               type: array
                               items:
                                 type: string
                  targets:
                    - target: admission.k8s.gatekeeper.sh
                      rego: |

                        package k8sdisallowedtags

                        import data.lib.exempt_container.is_exempt

                        violation[{"msg": msg}] {
                          container := input_containers[_]
                          not is_exempt(container)
                          tags := [forbid | tag = input.parameters.tags[_] ; forbid = endswith(container.image, concat(":", ["", tag]))]
                          any(tags)
                          msg := sprintf("container <%v> uses a disallowed tag <%v>; disallowed tags are %v", [container.name, container.image, input.parameters.tags])
                        }

                        violation[{"msg": msg}] {
                          container := input_containers[_]
                          not is_exempt(container)
                          tag := [contains(container.image, ":")]
                          not all(tag)
                          msg := sprintf("container <%v> didn't specify an image tag <%v>", [container.name, container.image])
                        }

                        input_containers[c] {
                            c := input.review.object.spec.containers[_]
                        }
                        input_containers[c] {
                            c := input.review.object.spec.initContainers[_]
                        }
                        input_containers[c] {
                            c := input.review.object.spec.ephemeralContainers[_]
                        }

                      libs:
                        - |
                          package lib.exempt_container

                          is_exempt(container) {
                              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                              img := container.image
                              exemption := exempt_images[_]
                              _matches_exemption(img, exemption)
                          }

                          _matches_exemption(img, exemption) {
                          not endswith(exemption, "*")
                          exemption == img
                          }

                          _matches_exemption(img, exemption) {
                          endswith(exemption, "*")
                          prefix := trim_suffix(exemption, "*")
                          startswith(img, prefix)
                          }

            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: K8sDisallowTags
                metadata:
                  name: container-image-must-not-have-latest-tag
                spec:
                  match:
                    kinds:
                      - apiGroups: [""]
                        kinds: ["Pod"]
                    namespaces:
                    - "app-example"
                  parameters:
                    tags: ["latest"]
                    exemptImages: ["openpolicyagent/opa-exp:latest", "openpolicyagent/opa-exp2:latest"]

---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: policy-disallow-tags-placement
  namespace: default
placementRef:
  name: policy-disallow-tags-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-disallow-tags
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: policy-disallow-tags-placement
  namespace: default
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
      matchExpressions: 
        - key: cluster.open-cluster-management.io/clusterset
          operator: In
          values:
          - edge

